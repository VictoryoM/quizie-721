create files -> RemoveTopics.tsx and Settings.tsx
--------------------------------------------------------------
replace code -> dashboard.tsx :

import React from 'react'
import SimpleSidebar from '../components/dashboard/sidebarDashboard';
import HomeStatistics from '../components/dashboard/HomeStat'
import TrendingTopics from '@/components/dashboard/TrendingTopics';
import BanTopics from '@/components/dashboard/BanTopics';
import Settings from '@/components/dashboard/Settings';
import RemoveTopic from '@/components/dashboard/RemoveTopic';

const dashboard = () => {
    return (
        <>
            <SimpleSidebar>
                <HomeStatistics />
                <TrendingTopics />
                <RemoveTopic />
                <BanTopics />
                <Settings />
            </SimpleSidebar>

        </>

    )
}

export default dashboard
---------------------------------------------------------

replace code -> sidebarDashboard.tsx :

import React, { ReactNode } from 'react';
import {
  IconButton,
  Box,
  CloseButton,
  Flex,
  Icon,
  useColorModeValue,
  Link,
  Drawer,
  DrawerContent,
  Text,
  useDisclosure,
  BoxProps,
  FlexProps,
} from '@chakra-ui/react';
import {
  FiHome,
  FiTrendingUp,
  FiCompass,
  FiStar,
  FiSettings,
  FiMenu,
} from 'react-icons/fi';


import { IconType } from 'react-icons';
import { ReactText } from 'react';

interface LinkItemProps {
  name: string;
  icon: IconType;
  path: string;
}
const LinkItems: Array<LinkItemProps> = [
  { name: 'Home', icon: FiHome, path: '/dashboard'},
  { name: 'Trending Topics', icon: FiTrendingUp, path: '/dashboard/trending-topics'},
  { name: 'Remove Topics', icon: FiCompass, path: '/dashboard/remove-topics' },
  { name: 'Ban Topics', icon: FiStar, path: '/dashboard/ban-topics'},
  { name: 'Settings', icon: FiSettings, path: '/dashboard/settings' },
];

export default function SimpleSidebar({ children }: { children?: ReactNode }) {
  const { isOpen, onOpen, onClose } = useDisclosure();
  return (
    <Box minH="100vh" bg={useColorModeValue('gray.100', 'gray.900')}>
      <SidebarContent
        onClose={() => onClose}
        display={{ base: 'none', md: 'block' }}
      />
      <Drawer
        autoFocus={false}
        isOpen={isOpen}
        placement="left"
        onClose={onClose}
        returnFocusOnClose={false}
        onOverlayClick={onClose}
        size="full">
        <DrawerContent>
          <SidebarContent onClose={onClose} />
        </DrawerContent>
      </Drawer>
      {/* mobilenav */}
      <MobileNav display={{ base: 'flex', md: 'none' }} onOpen={onOpen} />
      <Box ml={{ base: 0, md: 60 }} p="4">
        {children}
      </Box>
    </Box>
  );
}

interface SidebarProps extends BoxProps {
  onClose: () => void;
}

const SidebarContent = ({ onClose, ...rest }: SidebarProps) => {
  return (
    <Box
      bg={useColorModeValue('white', 'gray.900')}
      borderRight="1px"
      borderRightColor={useColorModeValue('gray.200', 'gray.700')}
      w={{ base: 'full', md: 60 }}
      pos="fixed"
      h="full"
      {...rest}>
      <Box display="flex" alignItems="center" justifyContent="space-between" p="4">
        <Text fontSize="xl" fontWeight="bold">
          Dashboard
        </Text>
        <CloseButton display={{base: 'block', md:'none' }} onClick={onClose} />
      </Box>
      {LinkItems.map((link) => (
        <NavItem key={link.name} icon={link.icon} path={link.path}>
          {link.name}
        </NavItem>
      ))}
    </Box>
  );
};

interface NavItemProps extends FlexProps {
  icon: IconType;
  children: ReactText;
  path: string;
}
const NavItem = ({ icon, children, path, ...rest }: NavItemProps) => {
  return (
    <Link href={path} style={{ textDecoration: 'none' }} _focus={{ boxShadow: 'none' }}>
      <Flex
        align="center"
        p="4"
        mx="4"
        borderRadius="lg"
        role="group"
        cursor="pointer"
        _hover={{
          bg: 'cyan.400',
          color: 'white',
        }}
        {...rest}>
        {icon && (
          <Icon
            mr="4"
            fontSize="16"
            _groupHover={{
              color: 'white',
            }}
            as={icon}
          />
        )}
        {children}
      </Flex>
    </Link>
  );
};

interface MobileProps extends FlexProps {
  onOpen: () => void;
}
const MobileNav = ({ onOpen, ...rest }: MobileProps) => {
  return (
    <Flex
      ml={{ base: 0, md: 60 }}
      px={{ base: 4, md: 24 }}
      height="20"
      alignItems="center"
      bg={useColorModeValue('white', 'gray.900')}
      borderBottomWidth="1px"
      borderBottomColor={useColorModeValue('gray.200', 'gray.700')}
      justifyContent="flex-start"
      {...rest}>
      <IconButton
        variant="outline"
        onClick={onOpen}
        aria-label="open menu"
        icon={<FiMenu />}
      />

      <Text fontSize="2xl" ml="8" fontFamily="monospace" fontWeight="bold">
        Dashboard
      </Text>
    </Flex>
  );
};
--------------------------------------------------------------

replace code -> HomeStat.tsx :

import {
    Box,
    chakra,
    SimpleGrid,
    Stat,
    StatLabel,
    StatNumber,
    useColorModeValue,
    Flex,
    Center,
} from '@chakra-ui/react';
import LineChart from '@/components/dashboard/LineChart';
import BarChart from '@/components/dashboard/BarChart';


interface StatsCardProps {
    title: string;
    stat: string;
}
function StatsCard(props: StatsCardProps) {
    const { title, stat } = props;
    return (
        <Stat
            px={{ base: 4, md: 8 }}
            py={'5'}
            shadow={'xl'}
            border={'1px solid'}
            borderColor={useColorModeValue('gray.400', 'gray.500')}
            rounded={'lg'}>
            <StatLabel fontWeight={'medium'} isTruncated>
                {title}
            </StatLabel>
            <StatNumber fontSize={'2xl'} fontWeight={'medium'}>
                {stat}
            </StatNumber>
        </Stat>
    );
}

export default function HomeStatistics() {

    return (
        <>
            <Box maxW="7xl" mx={'auto'} pt={5} px={{ base: 2, sm: 12, md: 17 }}>
                <chakra.h1
                    textAlign={'center'}
                    fontSize={'4xl'}
                    py={10}
                    fontWeight={'bold'}>
                    Home
                </chakra.h1>
                <SimpleGrid columns={{ base: 1, md: 3 }} spacing={{ base: 5, lg: 8 }}>
                    <StatsCard title={'Overall score'} stat={'60%'} />
                    <StatsCard title={'Attempted quizzes'} stat={'30'} />
                    <StatsCard title={'Previous quiz score'} stat={'80%'} />
                </SimpleGrid>
            </Box>
            <Center>
                <Box w={["60%", "90%", "100%"]}
                my={10}>
                    <Flex
                        flexDirection={{ base: "column", md: "row" }}
                        justifyContent="space-between"
                    >
                        <Box
                            shadow={'xl'}
                            border={'1px solid'}
                            borderColor={useColorModeValue('gray.400', 'gray.500')}
                            rounded={'lg'}
                            mt={10}
                            w={{ base: "full", md: "500px" }}
                            mx="auto">
                            <LineChart />
                        </Box>
                        <Box shadow={'xl'}
                            border={'1px solid'}
                            borderColor={useColorModeValue('gray.400', 'gray.500')}
                            rounded={'lg'}
                            mt={10}
                            w={{ base: "full", md: "500px" }}
                            mx="auto">
                            <BarChart />
                        </Box>
                    </Flex>
                </Box>
            </Center>

        </>
    );
}
--------------------------------------------------------------
