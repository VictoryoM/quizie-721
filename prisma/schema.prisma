// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// User table to store email, username, password, and user roles
model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime      @default(now())
  accounts      Account[]
  sessions      Session[]
  roles         Role[]        @relation("UserRole")
  // One-to-many relationship with Topic table
  topics        Topic[]       @relation("QuizMaster")
  // One-to-many relationship with TopicResult table
  topicResults  TopicResult[]
  Answer        Answer[]
  Leaderboard   Leaderboard[]
}

// Role table to store user roles
model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[] @relation("UserRole")
}

// Topic table to store questions based on the topic and the level of difficulty
model Topic {
  id           Int           @id @default(autoincrement())
  titleTopic   String
  description  String?
  level        String
  // One-to-many relationship with Question table
  questions    Question[]
  // One-to-many relationship with TopicResult table
  topicResults TopicResult[]
  // One-to-many relationship with User table as QuizMaster
  quizMaster   User?         @relation("QuizMaster", fields: [quizMasterId], references: [id])
  quizMasterId String?
  // Track the popularity of the topic based on the number of times it has been done
  timesTaken   Int           @default(0)
  Leaderboard  Leaderboard[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @default(now()) @updatedAt
}

// Question table to store the actual question and answer choices
model Question {
  id             Int      @id @default(autoincrement())
  question       String
  options        String[]
  correct_answer String
  // Explanation of the question
  explanation    String?
  // One-to-many relationship with Topic table
  topic          Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId        Int
  Answer         Answer[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
}

// Answer table to store users' answers to questions
model Answer {
  id             Int      @id @default(autoincrement())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  question       Question @relation(fields: [questionId], references: [id])
  questionId     Int
  selectedOption String
  isCorrect      Boolean

  TopicResult   TopicResult? @relation(fields: [topicResultId], references: [id], onDelete: Cascade)
  topicResultId Int?
  createdAt     DateTime     @default(now())
}

// TopicResult table to store users' results for a topic
model TopicResult {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  topic      Topic    @relation(fields: [topicId], references: [id])
  topicId    Int
  average    Float
  correctNum Int      @default(0)
  attemptNum Int      @default(0)
  answers    Answer[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

// Leaderboard table to track scores
model Leaderboard {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   Int
  score     Float    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
